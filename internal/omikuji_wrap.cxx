/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

// source: omikuji.i


extern
#ifdef __cplusplus
  "C"
#endif
  void cgo_panic__internal_8d5c9551d044389f(const char*);
static void _swig_gopanic(const char *p) {
  cgo_panic__internal_8d5c9551d044389f(p);
}



#define SWIG_VERSION 0x040101
#define SWIGGO
#define SWIGMODULE internal
/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef int intgo;
typedef unsigned int uintgo;


# if !defined(__clang__) && (defined(__i386__) || defined(__x86_64__))
#   define SWIGSTRUCTPACKED __attribute__((__packed__, __gcc_struct__))
# else
#   define SWIGSTRUCTPACKED __attribute__((__packed__))
# endif



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;



static _gostring_ Swig_AllocateString(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)malloc(l);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}


#include "errorCode.h"
#include "omikuji.h"


static omikuji::Paper *new_PaperArray(int nelements) { 
  return new omikuji::Paper[nelements](); 
}

static void delete_PaperArray(omikuji::Paper *ary) { 
  delete [] ary; 
}

static omikuji::Paper PaperArray_getitem(omikuji::Paper *ary, int index) {
    return ary[index];
}
static void PaperArray_setitem(omikuji::Paper *ary, int index, omikuji::Paper value) {
    ary[index] = value;
}


static short *new_shortArray(int nelements) { 
  return new short[nelements](); 
}

static void delete_shortArray(short *ary) { 
  delete [] ary; 
}

static short shortArray_getitem(short *ary, int index) {
    return ary[index];
}
static void shortArray_setitem(short *ary, int index, short value) {
    ary[index] = value;
}


static char * *new_strp(void) { 
  return new char *(); 
}

static char * *copy_strp(char * value) { 
  return new char *(value); 
}

static void delete_strp(char * *obj) { 
  delete obj; 
}

static void strp_assign(char * *obj, char * value) {
  *obj = value;
}

static char * strp_value(char * *obj) {
  return *obj;
}


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_internal_8d5c9551d044389f(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


void *_wrap_Swig_malloc_internal_8d5c9551d044389f(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


omikuji::Paper *_wrap_new_PaperArray_internal_8d5c9551d044389f(intgo _swig_go_0) {
  int arg1 ;
  omikuji::Paper *result = 0 ;
  omikuji::Paper *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (omikuji::Paper *)new_PaperArray(arg1);
  *(omikuji::Paper **)&_swig_go_result = (omikuji::Paper *)result; 
  return _swig_go_result;
}


void _wrap_delete_PaperArray_internal_8d5c9551d044389f(omikuji::Paper *_swig_go_0) {
  omikuji::Paper *arg1 = (omikuji::Paper *) 0 ;
  
  arg1 = *(omikuji::Paper **)&_swig_go_0; 
  
  delete_PaperArray(arg1);
  
}


omikuji::Paper *_wrap_PaperArray_getitem_internal_8d5c9551d044389f(omikuji::Paper *_swig_go_0, intgo _swig_go_1) {
  omikuji::Paper *arg1 = (omikuji::Paper *) 0 ;
  int arg2 ;
  omikuji::Paper result;
  omikuji::Paper *_swig_go_result;
  
  arg1 = *(omikuji::Paper **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = PaperArray_getitem(arg1,arg2);
  *(omikuji::Paper **)&_swig_go_result = new omikuji::Paper(result); 
  return _swig_go_result;
}


void _wrap_PaperArray_setitem_internal_8d5c9551d044389f(omikuji::Paper *_swig_go_0, intgo _swig_go_1, omikuji::Paper *_swig_go_2) {
  omikuji::Paper *arg1 = (omikuji::Paper *) 0 ;
  int arg2 ;
  omikuji::Paper arg3 ;
  omikuji::Paper *argp3 ;
  
  arg1 = *(omikuji::Paper **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  argp3 = (omikuji::Paper *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null omikuji::Paper");
  }
  arg3 = (omikuji::Paper)*argp3;
  
  
  PaperArray_setitem(arg1,arg2,SWIG_STD_MOVE(arg3));
  
}


short *_wrap_new_shortArray_internal_8d5c9551d044389f(intgo _swig_go_0) {
  int arg1 ;
  short *result = 0 ;
  short *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (short *)new_shortArray(arg1);
  *(short **)&_swig_go_result = (short *)result; 
  return _swig_go_result;
}


void _wrap_delete_shortArray_internal_8d5c9551d044389f(short *_swig_go_0) {
  short *arg1 = (short *) 0 ;
  
  arg1 = *(short **)&_swig_go_0; 
  
  delete_shortArray(arg1);
  
}


short _wrap_shortArray_getitem_internal_8d5c9551d044389f(short *_swig_go_0, intgo _swig_go_1) {
  short *arg1 = (short *) 0 ;
  int arg2 ;
  short result;
  short _swig_go_result;
  
  arg1 = *(short **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (short)shortArray_getitem(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_shortArray_setitem_internal_8d5c9551d044389f(short *_swig_go_0, intgo _swig_go_1, short _swig_go_2) {
  short *arg1 = (short *) 0 ;
  int arg2 ;
  short arg3 ;
  
  arg1 = *(short **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (short)_swig_go_2; 
  
  shortArray_setitem(arg1,arg2,arg3);
  
}


_gostring_* _wrap_new_strp_internal_8d5c9551d044389f() {
  char **result = 0 ;
  _gostring_* _swig_go_result;
  
  
  result = (char **)new_strp();
  *(char ***)&_swig_go_result = (char **)result; 
  return _swig_go_result;
}


_gostring_* _wrap_copy_strp_internal_8d5c9551d044389f(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  char **result = 0 ;
  _gostring_* _swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  
  result = (char **)copy_strp(arg1);
  *(char ***)&_swig_go_result = (char **)result; 
  free(arg1); 
  return _swig_go_result;
}


void _wrap_delete_strp_internal_8d5c9551d044389f(_gostring_* _swig_go_0) {
  char **arg1 = (char **) 0 ;
  
  arg1 = *(char ***)&_swig_go_0; 
  
  delete_strp(arg1);
  
}


void _wrap_strp_assign_internal_8d5c9551d044389f(_gostring_* _swig_go_0, _gostring_ _swig_go_1) {
  char **arg1 = (char **) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(char ***)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  strp_assign(arg1,arg2);
  
  free(arg2); 
}


_gostring_ _wrap_strp_value_internal_8d5c9551d044389f(_gostring_* _swig_go_0) {
  char **arg1 = (char **) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(char ***)&_swig_go_0; 
  
  result = (char *)strp_value(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


intgo _wrap_Error_NONE_internal_8d5c9551d044389f() {
  omikuji::Error result;
  intgo _swig_go_result;
  
  
  result = omikuji::Error::NONE;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Error_BREAK_BOX_internal_8d5c9551d044389f() {
  omikuji::Error result;
  intgo _swig_go_result;
  
  
  result = omikuji::Error::BREAK_BOX;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Error_STUCKKED_internal_8d5c9551d044389f() {
  omikuji::Error result;
  intgo _swig_go_result;
  
  
  result = omikuji::Error::STUCKKED;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_Paper_status_set_internal_8d5c9551d044389f(omikuji::Paper *_swig_go_0, _gostring_ _swig_go_1) {
  omikuji::Paper *arg1 = (omikuji::Paper *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(omikuji::Paper **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  {
    delete [] arg1->status;
    if (arg2) {
      arg1->status = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->status, (const char *)arg2);
    } else {
      arg1->status = 0;
    }
  }
  
  free(arg2); 
}


_gostring_ _wrap_Paper_status_get_internal_8d5c9551d044389f(omikuji::Paper *_swig_go_0) {
  omikuji::Paper *arg1 = (omikuji::Paper *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(omikuji::Paper **)&_swig_go_0; 
  
  result = (char *) ((arg1)->status);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_Paper_description_set_internal_8d5c9551d044389f(omikuji::Paper *_swig_go_0, _gostring_ _swig_go_1) {
  omikuji::Paper *arg1 = (omikuji::Paper *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(omikuji::Paper **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  {
    delete [] arg1->description;
    if (arg2) {
      arg1->description = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->description, (const char *)arg2);
    } else {
      arg1->description = 0;
    }
  }
  
  free(arg2); 
}


_gostring_ _wrap_Paper_description_get_internal_8d5c9551d044389f(omikuji::Paper *_swig_go_0) {
  omikuji::Paper *arg1 = (omikuji::Paper *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(omikuji::Paper **)&_swig_go_0; 
  
  result = (char *) ((arg1)->description);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


omikuji::Paper *_wrap_new_Paper__SWIG_0_internal_8d5c9551d044389f() {
  omikuji::Paper *result = 0 ;
  omikuji::Paper *_swig_go_result;
  
  
  result = (omikuji::Paper *)new omikuji::Paper();
  *(omikuji::Paper **)&_swig_go_result = (omikuji::Paper *)result; 
  return _swig_go_result;
}


omikuji::Paper *_wrap_new_Paper__SWIG_1_internal_8d5c9551d044389f(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  omikuji::Paper *result = 0 ;
  omikuji::Paper *_swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (omikuji::Paper *)new omikuji::Paper(arg1,arg2);
  *(omikuji::Paper **)&_swig_go_result = (omikuji::Paper *)result; 
  free(arg1); 
  free(arg2); 
  return _swig_go_result;
}


void _wrap_delete_Paper_internal_8d5c9551d044389f(omikuji::Paper *_swig_go_0) {
  omikuji::Paper *arg1 = (omikuji::Paper *) 0 ;
  
  arg1 = *(omikuji::Paper **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_delete_OmikujiItf_internal_8d5c9551d044389f(omikuji::OmikujiItf *_swig_go_0) {
  omikuji::OmikujiItf *arg1 = (omikuji::OmikujiItf *) 0 ;
  
  arg1 = *(omikuji::OmikujiItf **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_OmikujiItf_DrawStatus_internal_8d5c9551d044389f(omikuji::OmikujiItf *_swig_go_0, _gostring_* _swig_go_1) {
  omikuji::OmikujiItf *arg1 = (omikuji::OmikujiItf *) 0 ;
  char **arg2 = (char **) 0 ;
  omikuji::Error result;
  intgo _swig_go_result;
  
  arg1 = *(omikuji::OmikujiItf **)&_swig_go_0; 
  arg2 = *(char ***)&_swig_go_1; 
  
  result = (omikuji::Error)(arg1)->DrawStatus(arg2);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_OmikujiItf_DrawPaper_internal_8d5c9551d044389f(omikuji::OmikujiItf *_swig_go_0, omikuji::Paper *_swig_go_1) {
  omikuji::OmikujiItf *arg1 = (omikuji::OmikujiItf *) 0 ;
  omikuji::Paper *arg2 = (omikuji::Paper *) 0 ;
  omikuji::Error result;
  intgo _swig_go_result;
  
  arg1 = *(omikuji::OmikujiItf **)&_swig_go_0; 
  arg2 = *(omikuji::Paper **)&_swig_go_1; 
  
  result = (omikuji::Error)(arg1)->DrawPaper(arg2);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_OmikujiItf_MultiDrawPaper_internal_8d5c9551d044389f(omikuji::OmikujiItf *_swig_go_0, omikuji::Paper *_swig_go_1, intgo _swig_go_2) {
  omikuji::OmikujiItf *arg1 = (omikuji::OmikujiItf *) 0 ;
  omikuji::Paper *arg2 = (omikuji::Paper *) 0 ;
  int arg3 ;
  omikuji::Error result;
  intgo _swig_go_result;
  
  arg1 = *(omikuji::OmikujiItf **)&_swig_go_0; 
  arg2 = *(omikuji::Paper **)&_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  result = (omikuji::Error)(arg1)->MultiDrawPaper(arg2,arg3);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


omikuji::OmikujiItf *_wrap_OmikujiItf_CreateBox_internal_8d5c9551d044389f() {
  omikuji::OmikujiItf *result = 0 ;
  omikuji::OmikujiItf *_swig_go_result;
  
  
  result = (omikuji::OmikujiItf *)omikuji::OmikujiItf::CreateBox();
  *(omikuji::OmikujiItf **)&_swig_go_result = (omikuji::OmikujiItf *)result; 
  return _swig_go_result;
}


#ifdef __cplusplus
}
#endif

